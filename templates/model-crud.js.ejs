// Basic Create Read Update Delete (DRUD) database helper functions

const create = (args) => {
    // The model is imported here to prevent a circular dependency
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().insert(args).returning("*").first();
};

const findAll = (graphRelation = "") => {
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().withGraphFetched(graphRelation);
};

const findById = (id, graphRelation = "") => {
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().where({ id }).withGraphFetched(graphRelation).first();
};

const findByUuid = (uuid, graphRelation = "") => {
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().where({ uuid }).withGraphFetched(graphRelation).first();
};

const findWhereConditions = (page = 1, conditions = {}, graphRelation = "", pageSize = 10) => {
    const <%= modelName %> = require("./index");
    page = Math.max(0, parseInt(page) - 1);
    return <%= modelName %>.query().where(conditions).page(parseInt(page), pageSize).orderBy("created_at", "DESC").withGraphFetched(graphRelation);
};

const edit = (uuid, args) => {
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().where({ uuid }).patch(args).returning("*").first();
};

const destroy = (uuid) => {
    const <%= modelName %> = require("./index");
    return <%= modelName %>.query().where({ uuid }).del();
};

module.exports = { create, findAll, findById, findByUuid, findWhereConditions, edit, destroy };
